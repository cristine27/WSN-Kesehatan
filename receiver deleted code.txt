# def updateStatusSensing(dataSensing):
#     db = mysql.connector.connect(
#         host='localhost',
#         database='WSN',
#         user='phpmyadmin',
#         password='raspberry',
#         pool_name='mypool',
#         pool_size=POOL_SIZE+1
#     )

#     waktu = datetime.datetime.now()
#     waktu = waktu.strftime('%Y-%m-%d %H:%M:%S')
#     TempStatus = 0

#     # cursor = db.cursor(buffered=True)

#     # queryNode2 = ("UPDATE nodesensor SET status")

# def goingOffline(namaNode):
#     db = mysql.connector.connect(
#         host='localhost',
#         database='WSN',
#         user='phpmyadmin',
#         password='raspberry',
#         pool_name='mypool',
#         pool_size=POOL_SIZE+1
#     )

#     waktu = datetime.datetime.now()
#     waktu = waktu.strftime('%Y-%m-%d %H:%M:%S')
#     TempStatus = 0

#     cursor = db.cursor(buffered=True)

#     queryUpdate = ("UPDATE node SET status = %s, waktu = %s WHERE namaNode == %s")
#     valueUpdate = (TempStatus, waktu, namaNode)

#     cursor.execute(queryUpdate,valueUpdate)

#     db.commit()
#     cursor.close()
#     db.close()

# def getPingNode(x):
#     potong = x.split("|")
#     temp = ""
#     if validateData(x):
#         node = potong[0]
#         status = potong[4]

#     if(str(status)=="1"):
#         temp = "online"
#     else:
#         temp = "offline"
        
#     if(str(node)=="node1"):
#         Node["node1"] = temp
#     else:
#         Node["node2"] = temp
    
#     return node, status

# elif perintah == "0":
#             print("Mengirim perintah check status")
#             print("Respon akan diberikan dalam beberapa saat, mohon menunggu.")

#             s.write(str.encode("b"))
#             #msg = s.readline().decode("ascii").strip()
#             #print(msg)
#             time.sleep(5)
#             respon = 0
#             while(counter < 20):
#                 #respon = 0
#                 with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
#                     counterStart()
#                     msg = s.readline().decode("ascii").strip()
#                     counter += 1
#                     time.sleep(1)
#                     future3 = executor.submit(getPingNode, msg)
#                     time.sleep(1)
#                     if future3.done() and future3.result() != None:
#                         respon = 1
#                         print("")
#                         time.sleep(1)
#                         print("Hasil Check Status Node")
#                         future4 = executor.submit(updateNodeStatus, future3.result())
#                         global statusNode
#                         statusNode = True
#                         print(future3.result())
#             if respon == 1:
#                 print(" ")
#                 print(Node)
#                 print("Check Node Selesai")
#                 print(" ")
#             elif(respon==0 and bool(statusNode)==False):
#                 print(" ")
#                 print(Node)
#                 print("Node Tidak Merespon")
#                 print("Silahkan Cek Perangkat")
#                 print(" ")
#             resetCounter()
#             respon = 0
#             mainMenu()

# turn off status node
        # elif perintah == "8":
        #     s.write(str.encode("c").strip())
        #     flag = False
            
        #     print("Silahkan masukkan jumlah node yang akan dimatikan :")
        #     jumlahNode = int(input())
            
        #     print("Silahkan masukkan nama node yang akan dimatikan : ")
        #     print("format penulisan : namaNode1,namaNode2")
        #     namaNode = input()

        #     potong = namaNode.split(",")
        #     while jumlahNode>0:
        #         if(verifyidNode(potong[jumlahNode-1])):
        #             flag = True
        #             with concurrent.futures.ThreadPoolExecutor() as executor:
        #                 future = executor.submit(matikanNode(potong[jumlahNode-1]))
        #                 jumlahNode = jumlahNode - 1
        #         else:
        #             break
        #     if flag:
        #         print("Node berhasil dimatikan")
        #     else:
        #         print("Nama node tidak terdaftar")
        #         print("Silahkan cek kembali nama node masukan")
        #     mainMenu()
            
        # # turn on status node
        # elif perintah == "7":
        #     s.write(str.encode("c").strip())
        #     flag = False
            
        #     print("Silahkan masukkan jumlah node yang akan dinyalakan :")
        #     jumlahNode = int(input())
            
        #     print("Silahkan masukkan nama node yang akan dinyalakan : ")
        #     print("format penulisan : namaNode1,namaNode2")
        #     namaNode = input()

        #     potong = namaNode.split(",")
        
        #     while jumlahNode>0:
        #         if(verifyidNode(potong[jumlahNode-1])):
        #             flag = True
        #             with concurrent.futures.ThreadPoolExecutor() as executor:
        #                 future = executor.submit(hidupkanNode(potong[jumlahNode-1]))
        #                 jumlahNode = jumlahNode - 1
        #         else:
        #             break
        #     if flag:
        #         print("Node berhasil dinyalakan")
        #     else:
        #         print("Nama node tidak terdaftar")
        #         print("Silahkan cek kembali nama node masukan")
        #     mainMenu()

def counterStart():
    global counter

    while True:
        counter = counter - 1

        if counter == 0:
            resetCounter()
            break

def resetCounter():
    global counter
    counter = 15